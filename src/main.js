/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/mustache/mustache.js":
/*!*******************************************!*\
  !*** ./node_modules/mustache/mustache.js ***!
  \*******************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n\n\n//# sourceURL=webpack://hw6/./node_modules/mustache/mustache.js?");

/***/ }),

/***/ "./src/controller/controller.ts":
/*!**************************************!*\
  !*** ./src/controller/controller.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Controller = void 0;\r\nconst vars_1 = __webpack_require__(/*! ../utils/vars */ \"./src/utils/vars.ts\");\r\nclass Controller {\r\n    constructor(model, view, mediator) {\r\n        this.mediator = mediator;\r\n        this._model = model;\r\n        this._view = view;\r\n    }\r\n    init() {\r\n        this._model.init();\r\n        this._view.init();\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        this.mediator.subscribe(vars_1.EVENTS.CHANGE_BASE_INPUT_VALUE, this.changeInputHandler.bind(this));\r\n    }\r\n    changeInputHandler(data) {\r\n        this._model.updateRatesData(data);\r\n    }\r\n}\r\nexports.Controller = Controller;\r\n\n\n//# sourceURL=webpack://hw6/./src/controller/controller.ts?");

/***/ }),

/***/ "./src/controller/mediator.ts":
/*!************************************!*\
  !*** ./src/controller/mediator.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Mediator = void 0;\r\nclass Mediator {\r\n    constructor() {\r\n        this._events = {};\r\n    }\r\n    subscribe(event, fn) {\r\n        if (!this._events[event]) {\r\n            this._events[event] = [];\r\n        }\r\n        this._events[event].push({ context: this, callback: fn });\r\n        return this;\r\n    }\r\n    publish(event, data) {\r\n        if (!this._events[event]) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this._events[event].length; i++) {\r\n            const subscription = this._events[event][i];\r\n            subscription.callback.apply(subscription.context, [data]);\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.Mediator = Mediator;\r\n\n\n//# sourceURL=webpack://hw6/./src/controller/mediator.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst controller_1 = __webpack_require__(/*! ./controller/controller */ \"./src/controller/controller.ts\");\r\nconst model_1 = __webpack_require__(/*! ./model/model */ \"./src/model/model.ts\");\r\nconst view_1 = __webpack_require__(/*! ./view/view */ \"./src/view/view.ts\");\r\nconst mediator_1 = __webpack_require__(/*! ./controller/mediator */ \"./src/controller/mediator.ts\");\r\nconst mediator = new mediator_1.Mediator();\r\nconst model = new model_1.Model(mediator);\r\nconst view = new view_1.View(mediator);\r\nconst controller = new controller_1.Controller(model, view, mediator);\r\ncontroller.init();\r\n\n\n//# sourceURL=webpack://hw6/./src/main.ts?");

/***/ }),

/***/ "./src/model/model.ts":
/*!****************************!*\
  !*** ./src/model/model.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Model = void 0;\r\nconst mockServise_1 = __webpack_require__(/*! ../utils/mockServise */ \"./src/utils/mockServise.ts\");\r\nconst vars_1 = __webpack_require__(/*! ../utils/vars */ \"./src/utils/vars.ts\");\r\nclass Model {\r\n    constructor(mediator) {\r\n        this.mediator = mediator;\r\n    }\r\n    init() {\r\n        (0, mockServise_1.getCurrencyRates)().then(this.getCurrencyRatesSuccess.bind(this));\r\n    }\r\n    getCurrencyRatesSuccess(data) {\r\n        this._rates = data;\r\n        const expandedRates = this.expandRatesByCalculation();\r\n        this.mediator.publish(vars_1.EVENTS.GET_CURRENCY_RATES, expandedRates);\r\n    }\r\n    expandRatesByCalculation() {\r\n        this._rates.rates.forEach((item) => item.calculation = (item.rate * item.amount).toFixed(2));\r\n        return this._rates;\r\n    }\r\n    updateRatesData(data) {\r\n        this._rates.rates.forEach((item) => item.code === data.currency && (item.amount = Number(data.amount)));\r\n        this.getCurrencyRatesSuccess(this._rates);\r\n    }\r\n}\r\nexports.Model = Model;\r\n\n\n//# sourceURL=webpack://hw6/./src/model/model.ts?");

/***/ }),

/***/ "./src/utils/mockServise.ts":
/*!**********************************!*\
  !*** ./src/utils/mockServise.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getCurrencyRates = void 0;\r\nconst rates = {\r\n    baseCurrencyCode: \"EUR\",\r\n    baseCurrencyValue: \"euro\",\r\n    rates: [\r\n        {\r\n            code: \"USD\",\r\n            value: \"dollar\",\r\n            rate: 1.16,\r\n            amount: 100\r\n        },\r\n        {\r\n            code: \"GBP\",\r\n            value: \"pound\",\r\n            rate: 0.85,\r\n            amount: 100\r\n        },\r\n        {\r\n            code: \"UAH\",\r\n            value: \"hryvnia\",\r\n            rate: 30.40,\r\n            amount: 100\r\n        },\r\n        {\r\n            code: \"PLN\",\r\n            value: \"zloty\",\r\n            rate: 4.58,\r\n            amount: 100\r\n        }\r\n    ]\r\n};\r\nfunction getCurrencyRates() {\r\n    return Promise.resolve(rates);\r\n}\r\nexports.getCurrencyRates = getCurrencyRates;\r\n\n\n//# sourceURL=webpack://hw6/./src/utils/mockServise.ts?");

/***/ }),

/***/ "./src/utils/vars.ts":
/*!***************************!*\
  !*** ./src/utils/vars.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EVENTS = void 0;\r\nconst EVENTS = {\r\n    GET_CURRENCY_RATES: 'GET_CURRENCY_RATES',\r\n    CHANGE_BASE_INPUT_VALUE: 'CHANGE_BASE_INPUT_VALUE'\r\n};\r\nexports.EVENTS = EVENTS;\r\n\n\n//# sourceURL=webpack://hw6/./src/utils/vars.ts?");

/***/ }),

/***/ "./src/view/templates/base.ts":
/*!************************************!*\
  !*** ./src/view/templates/base.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.baseTemplate = void 0;\r\nconst baseTemplate = `\r\n<section class=\"currency-convertor\">\r\n    <div class=\"currency-convertor__wrapper\">\r\n        <h2 class=\"currency-convertor__title\">{{title}}</h2>\r\n        <nav class=\"currency-convertor__tabs\">\r\n            {{#tabs}}\r\n                <label class=\"currency-convertor__tab\">\r\n                    <input id={{value}} name=\"tab\" type=\"radio\" value={{value}} {{state}} />\r\n                    <span class=\"currency-convertor__label\">{{label}}</span>\r\n                </label>\r\n            {{/tabs}}\r\n        </nav>\r\n        <main class=\"currency-convertor__rates\"></main>\r\n        <footer class=\"currency-convertor__footer\">\r\n            <span class=\"currency-convertor__info\">{{production}}</span>\r\n        </footer>\r\n    </div>\r\n</section>`;\r\nexports.baseTemplate = baseTemplate;\r\n\n\n//# sourceURL=webpack://hw6/./src/view/templates/base.ts?");

/***/ }),

/***/ "./src/view/templates/inputs.ts":
/*!**************************************!*\
  !*** ./src/view/templates/inputs.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.inputsTemplate = void 0;\r\nconst inputsTemplate = `\r\n<div class=\"rates\">\r\n    {{#rates}}\r\n        <section class=\"rates__item\">\r\n            <h3 class=\"rates__item-title\">{{code}}</h3>\r\n            <div class=\"rates__item-info\">\r\n                <span class=\"rates__item-info-text\">1 {{baseCurrencyValue}} is</span>\r\n                <input class=\"rates__item-info-input\" name=\"info\" type=\"text\" value={{rate}} />\r\n                <span class=\"rates__item-info-currency\">{{value}}</span>\r\n            </div>\r\n            <div class=\"rates__item-changer\">\r\n                <label class=\"rates__item-changer-field\">\r\n                    <span class=\"rates__item-changer-label\">{{baseCurrencyCode}}</span>\r\n                    <input id={{code}} class=\"rates__item-changer-input\" name=\"base\" type=\"text\" value={{amount}} />\r\n                </label>\r\n                <label class=\"rates__item-changer-field\">\r\n                    <span class=\"rates__item-changer-label\">{{code}}</span>\r\n                    <input class=\"rates__item-changer-input\" name=\"tab\" type=\"text\" value={{calculation}} />\r\n                </label>\r\n            </div>\r\n        </section>\r\n    {{/rates}}\r\n</div>`;\r\nexports.inputsTemplate = inputsTemplate;\r\n\n\n//# sourceURL=webpack://hw6/./src/view/templates/inputs.ts?");

/***/ }),

/***/ "./src/view/templates/ranges.ts":
/*!**************************************!*\
  !*** ./src/view/templates/ranges.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.rangesTemplate = void 0;\r\nconst rangesTemplate = `\r\n<div class=\"rates\">\r\n    {{#rates}}\r\n        <section class=\"rates__item\">\r\n            <h3 class=\"rates__item-title\">{{code}}</h3>\r\n            <div class=\"rates__item-info\">\r\n                <span class=\"rates__item-info-text\">1 {{baseCurrencyValue}} is {{rate}} {{value}}</span>\r\n            </div>\r\n            <div class=\"rates__item-changer\">\r\n                <label class=\"rates__item-changer-field\">\r\n                    <span class=\"rates__item-changer-label\">{{baseCurrencyCode}}: {{amount}}</span>\r\n                    <input id={{code}} class=\"rates__item-changer-input\" name=\"base\" type=\"range\" value={{amount}} min=\"0\" max=\"200\" />\r\n                </label>\r\n                <label class=\"rates__item-changer-field\">\r\n                    <span class=\"rates__item-changer-label\">{{code}}: {{calculation}}</span>\r\n                    <input class=\"rates__item-changer-input\" name=\"tab\" type=\"range\" value={{calculation}} min=\"0\" max=\"6080\" />\r\n                </label>\r\n            </div>\r\n        </section>\r\n    {{/rates}}\r\n</div>`;\r\nexports.rangesTemplate = rangesTemplate;\r\n\n\n//# sourceURL=webpack://hw6/./src/view/templates/ranges.ts?");

/***/ }),

/***/ "./src/view/view.ts":
/*!**************************!*\
  !*** ./src/view/view.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.View = void 0;\r\nvar Mustache = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\r\nconst vars_1 = __webpack_require__(/*! ../utils/vars */ \"./src/utils/vars.ts\");\r\nconst base_1 = __webpack_require__(/*! ./templates/base */ \"./src/view/templates/base.ts\");\r\nconst inputs_1 = __webpack_require__(/*! ./templates/inputs */ \"./src/view/templates/inputs.ts\");\r\nconst ranges_1 = __webpack_require__(/*! ./templates/ranges */ \"./src/view/templates/ranges.ts\");\r\nclass View {\r\n    constructor(mediator) {\r\n        this.defaults = {\r\n            constants: {\r\n                APP_TITLE: 'Currency Convertor',\r\n                APP_PRODUCTION: 'Produced by Google Inc.',\r\n                APP_TABS: [{\r\n                        label: 'Inputs',\r\n                        value: 'inputs',\r\n                        state: 'Checked'\r\n                    }, {\r\n                        label: 'Ranges',\r\n                        value: 'ranges',\r\n                        state: ''\r\n                    }]\r\n            },\r\n            selectors: {\r\n                CONTAINER: '#container',\r\n                RATES: '.currency-convertor__rates',\r\n                TABS: '.currency-convertor__tabs'\r\n            }\r\n        };\r\n        this.activeTab = 'inputs';\r\n        this.container = document.querySelector(this.defaults.selectors.CONTAINER);\r\n        this.mediator = mediator;\r\n    }\r\n    init() {\r\n        this.bindEvents();\r\n        this.renderBaseTemplate();\r\n    }\r\n    bindEvents() {\r\n        this.mediator.subscribe(vars_1.EVENTS.GET_CURRENCY_RATES, this.getCurrencyRatesHandler.bind(this));\r\n        this.container.addEventListener('change', this.inputChangeHandler.bind(this));\r\n    }\r\n    getCurrencyRatesHandler(rates) {\r\n        this.rates = rates;\r\n        this.renderRatesTemplate(this.activeTab);\r\n    }\r\n    defineActiveTemplate(tab) {\r\n        return tab === 'inputs' ? inputs_1.inputsTemplate : ranges_1.rangesTemplate;\r\n    }\r\n    renderBaseTemplate() {\r\n        const rendered = Mustache.render(base_1.baseTemplate, {\r\n            title: this.defaults.constants.APP_TITLE,\r\n            production: this.defaults.constants.APP_PRODUCTION,\r\n            tabs: this.defaults.constants.APP_TABS\r\n        });\r\n        this.container.innerHTML = rendered;\r\n        this.afterBaseRender();\r\n    }\r\n    afterBaseRender() {\r\n        this.container.querySelector(this.defaults.selectors.TABS).addEventListener('click', this.tabsClickHandler.bind(this));\r\n    }\r\n    renderRatesTemplate(tab) {\r\n        const activeTemplate = this.defineActiveTemplate(tab);\r\n        const { baseCurrencyCode, baseCurrencyValue, rates } = this.rates;\r\n        const ratesRendered = Mustache.render(activeTemplate, {\r\n            baseCurrencyCode,\r\n            baseCurrencyValue,\r\n            rates\r\n        });\r\n        this.container.querySelector(this.defaults.selectors.RATES).innerHTML = ratesRendered;\r\n    }\r\n    tabsClickHandler(e) {\r\n        const id = e.target.id;\r\n        if (id && this.activeTab !== id) {\r\n            this.activeTab = id;\r\n            this.renderRatesTemplate(this.activeTab);\r\n        }\r\n    }\r\n    inputChangeHandler(e) {\r\n        const target = e.target;\r\n        if (target.name === 'base') {\r\n            const { id, value } = target;\r\n            this.mediator.publish(vars_1.EVENTS.CHANGE_BASE_INPUT_VALUE, {\r\n                currency: id,\r\n                amount: value\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.View = View;\r\n\n\n//# sourceURL=webpack://hw6/./src/view/view.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;